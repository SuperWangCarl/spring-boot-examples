package ${package.Controller};


import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import lombok.extern.slf4j.Slf4j;
import com.hedian.platform.base.BaseResult;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import com.hedian.platform.annotation.BaseLog;
import com.hedian.platform.validate.AddGroup;
import com.hedian.platform.validate.EditGroup;
import com.hedian.platform.utils.JsonUtil;
import com.baomidou.mybatisplus.plugins.Page;
import ${package.Service}.${table.serviceName};

#if(${restControllerStyle})
import org.springframework.web.bind.annotation.RestController;
#else
import org.springframework.stereotype.Controller;
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end

/**
 * <p>
 * $!{table.comment} 前端控制器
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@RequestMapping("/${table.entityPath}")
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end

#else
    #if(${superControllerClass})
	@Api(tags = "${entity}", description = "$!{table.comment} API")
	@Slf4j
	@BaseLog("$!{table.comment}")
	public class ${table.controllerName} extends ${superControllerClass} {
    #else
	public class ${table.controllerName} {
    #end

@Autowired
private ${table.serviceName} ${table.entityPath}Service;

/**
 * 单个查
 */
@GetMapping("/query/{id}")
@ApiOperation(value = "单个查询", httpMethod = "GET")
@ApiImplicitParam(name = "id", value = "id", required = true, dataType = "String", paramType = "path")
@BaseLog
public BaseResult<${entity}Vo> query${entity}(@PathVariable String id){
		log.info("query --- query${entity}:{}",id);
		return ${table.entityPath}Service.query${entity}(id);
		}

/**
 * 分页查 条件查
 */
@GetMapping("/page")
@ApiOperation(value = "分页查询", httpMethod = "GET")
@ApiImplicitParams({
		@ApiImplicitParam(name = "index", value = "第几页,默认1", dataType = "Integer", paramType = "query"),
		@ApiImplicitParam(name = "size", value = "每页几条数据,默认10", dataType = "Integer", paramType = "query"),
		@ApiImplicitParam(name = "searchInfo", value = "搜索信息", dataType = "String", paramType = "query"),
})
@BaseLog
public BaseResult<Page<${entity}Vo>>query${entity}List(@RequestParam(name = "index", defaultValue = "1", required = false) Integer index,
@RequestParam(name = "size", defaultValue = "10", required = false) Integer size,
@RequestParam(name = "searchInfo", defaultValue = "", required = false) String searchInfo){
		log.info("query --- query${entity}List:{}:{}:{}",searchInfo);
		Page<${entity}Vo> page=new Page<>(index,size);
		return ${table.entityPath}Service.query${entity}List(page,searchInfo);
		}
/**
 * 增
 */
@PostMapping("/add")
@ApiOperation(value = "添加", httpMethod = "POST")
@BaseLog
public BaseResult<${entity}Vo> add${entity}(@RequestBody @Validated(AddGroup.class) ${entity}Vo ${table.entityPath}Vo){
		log.info("add --- add${entity}:{}",JsonUtil.Object2JsonString(${table.entityPath}Vo));
    ${table.entityPath}Vo.setCreateId(getUser().getUserId());
		return ${table.entityPath}Service.add${entity}(${table.entityPath}Vo);
		}
/**
 * 改
 */
@PutMapping("/edit")
@ApiOperation(value = "编辑", httpMethod = "PUT")
@BaseLog
public BaseResult<${entity}Vo> edit${entity}(@RequestBody @Validated(EditGroup.class) ${entity}Vo ${table.entityPath}Vo){
		log.info("edit ---edit${entity}:{}",JsonUtil.Object2JsonString(${table.entityPath}Vo));
    ${table.entityPath}Vo.setModifiedId(getUser().getUserId());
		return ${table.entityPath}Service.edit${entity}(${table.entityPath}Vo);
		}
/**
 * 删
 */
@DeleteMapping("/delete/{id}")
@ApiOperation(value = "删除", httpMethod = "DELETE")
@ApiImplicitParam(name = "id", value = "id", required = true, dataType = "String", paramType = "path")
@BaseLog
public BaseResult<${entity}Vo> delete${entity}(@PathVariable String id){
		log.info("delete --- delete${entity}:{}",id);
		return ${table.entityPath}Service.delete${entity}(id,getUser().getUserId());
		}
		}

#end